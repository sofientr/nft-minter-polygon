import React, { useState, useEffect } from 'react';
import Web3 from 'web3'

import Button from '@material-ui/core/Button';
import Avatar from '@material-ui/core/Avatar';
import Paper from "@material-ui/core/Paper";
import { makeStyles } from '@material-ui/core/styles';

import { pinJSONToIPFS, pinFileToIPFS, encodedParams } from '../utils/ipfs';

const abi = require('../config/abi.json');
const abi_1155 = require('../config/abi_1155.json');

import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
toast.configure();
const bytecode="0x60806040523480156200001157600080fd5b506040805180820182526005815264135e53919560da1b6020808301918252835180850190945260048452631353919560e21b9084015281519192916200005b91600091620000ea565b50805162000071906001906020840190620000ea565b5050506200008e620000886200009460201b60201c565b62000098565b620001cd565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620000f89062000190565b90600052602060002090601f0160209004810192826200011c576000855562000167565b82601f106200013757805160ff191683800117855562000167565b8280016001018555821562000167579182015b82811115620001675782518255916020019190600101906200014a565b506200017592915062000179565b5090565b5b808211156200017557600081556001016200017a565b600281046001821680620001a557607f821691505b60208210811415620001c757634e487b7160e01b600052602260045260246000fd5b50919050565b61164880620001dd6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c8063715018a6116100a2578063b88d4fde11610071578063b88d4fde14610207578063c87b56dd1461021a578063d0def5211461022d578063e985e9c514610240578063f2fde38b146102535761010b565b8063715018a6146101dc5780638da5cb5b146101e457806395d89b41146101ec578063a22cb465146101f45761010b565b806323b872dd116100de57806323b872dd1461018357806342842e0e146101965780636352211e146101a957806370a08231146101bc5761010b565b806301ffc9a71461011057806306fdde0314610139578063081812fc1461014e578063095ea7b31461016e575b600080fd5b61012361011e366004610fed565b610266565b60405161013091906110d9565b60405180910390f35b6101416102ae565b60405161013091906110e4565b61016161015c366004611025565b610340565b6040516101309190611088565b61018161017c366004610fc4565b61038c565b005b610181610191366004610e77565b610424565b6101816101a4366004610e77565b61045c565b6101616101b7366004611025565b610477565b6101cf6101ca366004610e2b565b6104ac565b604051610130919061155d565b6101816104f0565b61016161053b565b61014161054a565b610181610202366004610f2b565b610559565b610181610215366004610eb2565b610627565b610141610228366004611025565b610666565b6101cf61023b366004610f65565b61072c565b61012361024e366004610e45565b610761565b610181610261366004610e2b565b61078f565b60006001600160e01b031982166380ac58cd60e01b148061029757506001600160e01b03198216635b5e139f60e01b145b806102a657506102a682610800565b90505b919050565b6060600080546102bd90611595565b80601f01602080910402602001604051908101604052809291908181526020018280546102e990611595565b80156103365780601f1061030b57610100808354040283529160200191610336565b820191906000526020600020905b81548152906001019060200180831161031957829003601f168201915b5050505050905090565b600061034b82610819565b6103705760405162461bcd60e51b8152600401610367906113b2565b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061039782610477565b9050806001600160a01b0316836001600160a01b031614156103cb5760405162461bcd60e51b8152600401610367906114cb565b806001600160a01b03166103dd610836565b6001600160a01b031614806103f957506103f98161024e610836565b6104155760405162461bcd60e51b81526004016103679061128d565b61041f838361083a565b505050565b61043561042f610836565b826108a8565b6104515760405162461bcd60e51b81526004016103679061150c565b61041f83838361092d565b61041f83838360405180602001604052806000815250610627565b6000818152600260205260408120546001600160a01b0316806102a65760405162461bcd60e51b815260040161036790611334565b60006001600160a01b0382166104d45760405162461bcd60e51b8152600401610367906112ea565b506001600160a01b031660009081526003602052604090205490565b6104f8610836565b6001600160a01b031661050961053b565b6001600160a01b03161461052f5760405162461bcd60e51b8152600401610367906113fe565b6105396000610a5a565b565b6006546001600160a01b031690565b6060600180546102bd90611595565b610561610836565b6001600160a01b0316826001600160a01b031614156105925760405162461bcd60e51b81526004016103679061120a565b806005600061059f610836565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff1916921515929092179091556105e3610836565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161061b91906110d9565b60405180910390a35050565b610638610632610836565b836108a8565b6106545760405162461bcd60e51b81526004016103679061150c565b61066084848484610aac565b50505050565b606061067182610819565b61068d5760405162461bcd60e51b81526004016103679061147c565b600082815260086020526040812080546106a690611595565b80601f01602080910402602001604051908101604052809291908181526020018280546106d290611595565b801561071f5780601f106106f45761010080835404028352916020019161071f565b820191906000526020600020905b81548152906001019060200180831161070257829003601f168201915b5093979650505050505050565b60006107386007610adf565b60006107446007610ae8565b90506107508482610aec565b61075a8184610bcb565b9392505050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b610797610836565b6001600160a01b03166107a861053b565b6001600160a01b0316146107ce5760405162461bcd60e51b8152600401610367906113fe565b6001600160a01b0381166107f45760405162461bcd60e51b815260040161036790611149565b6107fd81610a5a565b50565b6001600160e01b031981166301ffc9a760e01b14919050565b6000908152600260205260409020546001600160a01b0316151590565b3390565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061086f82610477565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006108b382610819565b6108cf5760405162461bcd60e51b815260040161036790611241565b60006108da83610477565b9050806001600160a01b0316846001600160a01b031614806109155750836001600160a01b031661090a84610340565b6001600160a01b0316145b8061092557506109258185610761565b949350505050565b826001600160a01b031661094082610477565b6001600160a01b0316146109665760405162461bcd60e51b815260040161036790611433565b6001600160a01b03821661098c5760405162461bcd60e51b8152600401610367906111c6565b61099783838361041f565b6109a260008261083a565b6001600160a01b03831660009081526003602052604081208054600192906109cb90849061157e565b90915550506001600160a01b03821660009081526003602052604081208054600192906109f9908490611566565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610ab784848461092d565b610ac384848484610bea565b6106605760405162461bcd60e51b8152600401610367906110f7565b80546001019055565b5490565b6001600160a01b038216610b125760405162461bcd60e51b81526004016103679061137d565b610b1b81610819565b15610b385760405162461bcd60e51b81526004016103679061118f565b610b446000838361041f565b6001600160a01b0382166000908152600360205260408120805460019290610b6d908490611566565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000828152600860209081526040909120825161041f92840190610d0b565b6000610bfe846001600160a01b0316610d05565b15610cfa57836001600160a01b031663150b7a02610c1a610836565b8786866040518563ffffffff1660e01b8152600401610c3c949392919061109c565b602060405180830381600087803b158015610c5657600080fd5b505af1925050508015610c86575060408051601f3d908101601f19168201909252610c8391810190611009565b60015b610ce0573d808015610cb4576040519150601f19603f3d011682016040523d82523d6000602084013e610cb9565b606091505b508051610cd85760405162461bcd60e51b8152600401610367906110f7565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610925565b506001949350505050565b3b151590565b828054610d1790611595565b90600052602060002090601f016020900481019282610d395760008555610d7f565b82601f10610d5257805160ff1916838001178555610d7f565b82800160010185558215610d7f579182015b82811115610d7f578251825591602001919060010190610d64565b50610d8b929150610d8f565b5090565b5b80821115610d8b5760008155600101610d90565b600067ffffffffffffffff80841115610dbf57610dbf6115e6565b604051601f8501601f191681016020018281118282101715610de357610de36115e6565b604052848152915081838501861015610dfb57600080fd5b8484602083013760006020868301015250509392505050565b80356001600160a01b03811681146102a957600080fd5b600060208284031215610e3c578081fd5b61075a82610e14565b60008060408385031215610e57578081fd5b610e6083610e14565b9150610e6e60208401610e14565b90509250929050565b600080600060608486031215610e8b578081fd5b610e9484610e14565b9250610ea260208501610e14565b9150604084013590509250925092565b60008060008060808587031215610ec7578081fd5b610ed085610e14565b9350610ede60208601610e14565b925060408501359150606085013567ffffffffffffffff811115610f00578182fd5b8501601f81018713610f10578182fd5b610f1f87823560208401610da4565b91505092959194509250565b60008060408385031215610f3d578182fd5b610f4683610e14565b915060208301358015158114610f5a578182fd5b809150509250929050565b60008060408385031215610f77578182fd5b610f8083610e14565b9150602083013567ffffffffffffffff811115610f9b578182fd5b8301601f81018513610fab578182fd5b610fba85823560208401610da4565b9150509250929050565b60008060408385031215610fd6578182fd5b610fdf83610e14565b946020939093013593505050565b600060208284031215610ffe578081fd5b813561075a816115fc565b60006020828403121561101a578081fd5b815161075a816115fc565b600060208284031215611036578081fd5b5035919050565b60008151808452815b8181101561106257602081850181015186830182015201611046565b818111156110735782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906110cf9083018461103d565b9695505050505050565b901515815260200190565b60006020825261075a602083018461103d565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201526832b73a103a37b5b2b760b91b606082015260800190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201526839903737ba1037bbb760b91b606082015260800190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b90815260200190565b60008219821115611579576115796115d0565b500190565b600082821015611590576115906115d0565b500390565b6002810460018216806115a957607f821691505b602082108114156115ca57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146107fd57600080fdfea264697066735822122040f3e89ed2f22b1ca71e7a152e375531d38844e7c981fc93b069f46cd7fd79bf64736f6c63430008000033"

const Form = ({ signerAddress, setIsLoading, setTrsHash, setErr, networkId, setOpen ,external ,setDeployedContract }) => {
  const classes = useStyles();

  // hooks
  const [name, setName] = useState('');
  const [desc, setDesc] = useState('');
  const [surl, setSurl] = useState('');
  const [address, setAddress] = useState('');

  const [file, setFile] = useState(null);
  const [imgSrc, setImgSrc] = useState("");
  const [nftType, setNftType] = useState('ERC721');
  const [ercTwoNum, setErcTwoNum] = useState(1);
  const [errors, setErrors] = useState({
    name: "",
    desc: "",
    file: "",
    address:""
  })
  const  onClick =async (e)=>{
   
    e.preventDefault();
    console.log("helllo")
    setIsLoading(true);
    const web3 = new Web3(window.ethereum)
let contract = new web3.eth.Contract(abi, {from: signerAddress, data: bytecode});   
 const txnhash = await contract.deploy({}
    )
    .send({ from: signerAddress })
    .on("confirmation", (confirmationNumber, receipt) => { })
    .on('receipt', function(receipt){
      console.log(receipt.contractAddress)
      setDeployedContract(receipt.contractAddress) // contains the new contract address
   })
    .on("error", (error, receipt) => {
      setErr("Transaction Failed")
    })
    setDeployedContract(txnhash.transactionHash);
    console.log(txnhash.transactionHash);


    setIsLoading(false);






  }

  const validateAddress = () => {
    if (address === "") {
      setErrors(pS => ({ ...pS, address: 'address cannot be empty' }))
    } else {
      setErrors(pS => ({ ...pS, address: '' }))
    }
  }
  // validate form
  const validateName = () => {
    if (name === "") {
      setErrors(pS => ({ ...pS, name: 'Name cannot be empty' }))
    } else {
      setErrors(pS => ({ ...pS, name: '' }))
    }
  }
  const validateDesc = () => {
    if (desc === "") {
      setErrors(pS => ({ ...pS, desc: 'Add description for your token' }))
    } else {
      setErrors(pS => ({ ...pS, desc: '' }))
    }
  }
  // handle file upload
  const handleFile = (e) => {
    setFile(e.target.files[0]);
    if (e.target.files.length !== 0) {
      const reader = new FileReader();
      reader.onload = e => {
        setImgSrc(e.target.result);
      };
      reader.readAsDataURL(e.target.files[0]);
    }
  }


  const onSubmit = async (e) => {
    e.preventDefault();

    if (name && desc && file && signerAddress && (networkId.chainId === 80001 || networkId.chainId === 137)) {
      setIsLoading(true);
      setErr('');
      setTrsHash('');

      const imgHash = await pinFileToIPFS(file);
      toast("File uploaded to IPFS", { type: "success" });

      const ipfsHash = await pinJSONToIPFS({
        name: name,
        description: desc,
        image: 'https://gateway.pinata.cloud/ipfs/' + imgHash,
        external_url: surl
      })
      toast("JSON data uploaded to IPFS", { type: "success" });
      console.log(ipfsHash)

      if (nftType === 'ERC721') {
        const web3 = new Web3(window.ethereum)
        var contract_721
        if(external){
           contract_721 = new web3.eth.Contract(   [     {
            "inputs": [
              {
                "internalType": "address",
                "name": "recipient",
                "type": "address"
              },
              {
                "internalType": "string",
                "name": "uri",
                "type": "string"
              }
            ],
            "name": "mint",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          }], address);


        }else{
          contract_721 = new web3.eth.Contract(abi, "0xa1bb777C6fe51bB5F7d12B68A2ca52BD46D7dfc1");


        }
        const txnhash = await contract_721.methods.mint(signerAddress, 'https://gateway.pinata.cloud/ipfs/' + ipfsHash)
        .send({ from: signerAddress })
        .on("confirmation", (confirmationNumber, receipt) => { })
        .on("error", (error, receipt) => {
          setErr("Transaction Failed")
        })
        setTrsHash(txnhash.transactionHash);
        console.log(txnhash.transactionHash);

      }

      toast("NFT Minted", { type: "success" });
      toast("NFT Minted", { type: "success" });
      setIsLoading(false);
    } else {
      validateName();
      validateDesc();
      validateAddress();
      if (signerAddress && (networkId.chainId !== 80001 || networkId.chainId !== 137)) {
        setOpen(true);
        setErr("Wallet not found");
      } else
        setErr("Enter all mandatory fields");
    }
  }


  return (
    <>
       
      {external&& <Button type="submit" className={classes.submit} onClick={onClick}>deploy contract</Button>}



    <form className={classes.root} noValidate autoComplete="off" onSubmit={onSubmit}>
         {external&&<div className={classes.formGroup}>
        <label className={classes.formGroupLabel}>contract address</label>
        <input
          type="text"
          style={{ border: errors.address ? '1px solid tomato' : '1px solid black' }}
          placeholder=""
          className={classes.formGroupInput}
          value={address}
          onChange={(e) => {
            setAddress(e.target.value);
            setErr('')
            setErrors(pS => ({ ...pS, address: '' }))
          }}
          onBlur={validateAddress}
          
        />
        {errors.address && <p className={classes.error}>{errors.address}</p>}
      </div>}
      <div className={classes.formGroup}>
        <label className={classes.formGroupLabel}>Name of NFT</label>
        <input
          type="text"
          style={{ border: errors.name ? '1px solid tomato' : '1px solid black' }}
          placeholder=""
          className={classes.formGroupInput}
          value={name}
          onChange={(e) => {
            setName(e.target.value);
            setErr('')
            setErrors(pS => ({ ...pS, name: '' }))
          }}
          onBlur={validateName}
          required
        />
        {errors.name && <p className={classes.error}>{errors.name}</p>}
      </div>
      <div className={classes.formGroup}>
        <label className={classes.formGroupLabel}>Description</label>
        <input
          type="text"
          style={{ border: errors.desc ? '1px solid tomato' : '1px solid black' }}
          placeholder=""
          className={classes.formGroupInput}
          value={desc}
          onChange={(e) => {
            setErrors(pS => ({ ...pS, desc: '' }));
            setErr('')
            setDesc(e.target.value)
          }}
          onBlur={validateDesc}
          required
        />
        {errors.desc && <p className={classes.error}>{errors.desc}</p>}
      </div>
      <div className={classes.formGroup}>
        <label className={classes.formGroupLabel}>Social Media URL</label>
        <input
          type="url"
          placeholder=""
          className={classes.formGroupInput}
          value={surl}
          pattern="https?://.+"
          onChange={(e) => setSurl(e.target.value)}
        />
      </div>

      <div className={classes.endCont}>

        <div className={classes.formGroup} style={{ margin: '0.5rem 0' }}>
          <label className={classes.formGroupLabel}> NFT image  </label>
          <div className={classes.formGroupFile}>
            <input accept="image/*" id="upload-company-logo" onChange={handleFile} type='file' hidden />
            <label htmlFor="upload-company-logo">
            <Button component="span" >
                <Paper elevation={5}>
                  <Avatar src={imgSrc} className={classes.avatar} variant='rounded' />
                </Paper>
              </Button>
            </label>
          </div>
          {file && <p>{file.name}</p>}
        </div>

      </div>

      <Button type="submit" className={classes.submit}>Submit</Button>
      
    </form>
    </>
  );
}

const useStyles = makeStyles((theme) => ({
  root: {
    '& .MuiTextField-root': {
      margin: theme.spacing(1),
      width: 200,
    },
  },
  error: {
    margin: '2px 0px',
    textAlign: 'left',
    color: 'tomato'
  },
  formGroup: {
    margin: '0 auto 1rem auto',
    padding: '0.25rem'
  },
  formGroupLabel: {
    display: 'flex',
    alignItems: 'center',
    fontSize: '1.125rem',
    marginBottom: '0.5rem'
  },
  formGroupInput: {
    display: 'block',
    width: '100%',
    height: '2.375rem',
    padding: '0.375rem 0.75rem',
    color: theme.palette.text.primary,
    backgroundColor: 'transparent',
    backgroundClip: 'padding-box',
    border: '1px solid black',
    borderRadius: '0.25rem',
    outline: 'none',
    transition: 'border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out',
    'hover': {

    }
  },
  endCont: {
    display: 'flex',
    justifyContent: 'space-between',
    [theme.breakpoints.down('xs')]: {
      display: 'block'
    },
  },
  formGroupFile: {
    display: 'flex'
  },
  formGroupFileImg: {
    marginRight: 20
  },
  typeButton: {
    marginRight: 10,
    border: `2px solid ${theme.custom.palette.btn}`,
    color: 'rgba(0, 0, 0, 0.26)',
    backgroundColor: theme.custom.palette.btn,
    '&:hover': {
      background: theme.custom.palette.btn,
    },
    "&:disabled": {
      border: `2px solid ${theme.palette.text.primary}`,
      color: 'rgba(0, 0, 0, 1)'
    }
  },
  quant: {
    margin: 0,
    marginTop: 10,
    fontSize: 16,
    textAlign: 'left'
  },
  quantInput: {
    width: '80px',
    marginLeft: 10,
    padding: '0.375rem 0.75rem',
    color: theme.palette.text.primary,
    backgroundColor: 'transparent',
    backgroundClip: 'padding-box',
    border: '1px solid black',
    borderRadius: '0.25rem',
    outline: 'none',
    transition: 'border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out',
    'hover': {

    }
  },
  submit: {
    backgroundColor: theme.custom.palette.btn,
    padding: '10px 16px',
    fontSize: 18,
    '&:hover': {
      background: theme.custom.palette.btn,
      // border: `2px solid ${theme.palette.text.primary}`,
    }
  }
}));

export default Form;
